-- MySQL Script generated by MySQL Workbench
-- dim. 18 d√©c. 2016 21:24:53 CET
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Roles` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Roles` (
  `idRoles` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `roleName` VARCHAR(45) NOT NULL,
  `canUsePrivate` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Can create private channels\n',
  `canModerate` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Can moderate channel\nuser did not create\n',
  `canArchive` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Can archive channel \nuser did not create\n',
  `canInvite` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Can invite new member\nin organisation',
  `canManage` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Can manage organisation\n(update information,\nadd bots, add plugins).\n',
  `canManageUser` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Role name ~~',
  PRIMARY KEY (`idRoles`),
  UNIQUE INDEX `idRoles_UNIQUE` (`idRoles` ASC),
  UNIQUE INDEX `roleName_UNIQUE` (`roleName` ASC))
ENGINE = InnoDB
COMMENT = 'Contain all roles within an organisation and their rights';


-- -----------------------------------------------------
-- Table `mydb`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`User` ;

CREATE TABLE IF NOT EXISTS `mydb`.`User` (
  `idUser` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `webId` VARCHAR(26) NOT NULL COMMENT 'Used to generate web storage keys\n',
  `userName` VARCHAR(64) NOT NULL COMMENT 'User Name. Can be used\nto login instead of mail adress\n',
  `email` VARCHAR(128) NOT NULL COMMENT 'User email. Can be used\nto login instead of userName\n',
  `emailVerified` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Store email verification state\n(default false)\n',
  `updatedAt` INT UNSIGNED NOT NULL COMMENT 'Last known update (in MS)\n',
  `deleted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'User deleted ? ',
  `password` VARCHAR(200) NOT NULL COMMENT 'User password. Stored encrypted\n',
  `lastPasswordUpdate` INT NOT NULL COMMENT 'Last time password was updated (in MS)\n',
  `failedAttemprs` INT NOT NULL DEFAULT 0 COMMENT 'Number of failed attempts for user login.\n',
  `locale` VARCHAR(5) NOT NULL DEFAULT 'fr_FR' COMMENT 'Langage code (fr_FR, en_US, en_EN .... )\n',
  `role` INT UNSIGNED NOT NULL,
  `avatar` VARCHAR(45) NULL,
  `nickName` VARCHAR(45) NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  PRIMARY KEY (`idUser`),
  UNIQUE INDEX `webId_UNIQUE` (`webId` ASC),
  UNIQUE INDEX `idUser_UNIQUE` (`idUser` ASC),
  UNIQUE INDEX `userName_UNIQUE` (`userName` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `fk_User_Roles_idx` (`role` ASC),
  CONSTRAINT `fk_User_Roles`
    FOREIGN KEY (`role`)
    REFERENCES `mydb`.`Roles` (`idRoles`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Table to store all user informations\n';


-- -----------------------------------------------------
-- Table `mydb`.`Organisation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Organisation` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Organisation` (
  `idOrganisation` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dockerStack` INT UNSIGNED NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(45) NULL,
  `avatar` VARCHAR(45) NULL,
  `domain` VARCHAR(45) NULL,
  PRIMARY KEY (`idOrganisation`),
  UNIQUE INDEX `idOrganisation_UNIQUE` (`idOrganisation` ASC),
  UNIQUE INDEX `dockerStack_UNIQUE` (`dockerStack` ASC))
ENGINE = InnoDB
COMMENT = 'Table to store Organisation related informations\n';


-- -----------------------------------------------------
-- Table `mydb`.`Channel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Channel` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Channel` (
  `idChannel` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `channelName` VARCHAR(45) NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  `private` TINYINT(1) NOT NULL DEFAULT 0,
  `description` VARCHAR(45) NULL,
  `avatar` VARCHAR(45) NULL,
  `subject` VARCHAR(45) NULL,
  PRIMARY KEY (`idChannel`),
  UNIQUE INDEX `idChannel_UNIQUE` (`idChannel` ASC),
  UNIQUE INDEX `channelName_UNIQUE` (`channelName` ASC))
ENGINE = InnoDB
COMMENT = 'Channel Management';


-- -----------------------------------------------------
-- Table `mydb`.`Member`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Member` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Member` (
  `user` INT UNSIGNED NOT NULL,
  `channel` INT UNSIGNED NOT NULL,
  `role` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user`, `channel`),
  UNIQUE INDEX `User_UNIQUE` (`user` ASC),
  UNIQUE INDEX `Role_UNIQUE` (`role` ASC),
  UNIQUE INDEX `channel_UNIQUE` (`channel` ASC),
  CONSTRAINT `fk_Member_User`
    FOREIGN KEY (`user`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Member_Role`
    FOREIGN KEY (`role`)
    REFERENCES `mydb`.`Roles` (`idRoles`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Member_Channel`
    FOREIGN KEY (`channel`)
    REFERENCES `mydb`.`Channel` (`idChannel`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Store information about member of organisation.';


-- -----------------------------------------------------
-- Table `mydb`.`Message`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Message` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Message` (
  `idMessage` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `creator` INT UNSIGNED NOT NULL,
  `channel` INT UNSIGNED NOT NULL,
  `date` INT NOT NULL,
  `content` LONGTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`idMessage`),
  INDEX `fk_Message_User_idx` (`creator` ASC),
  INDEX `fk_Message_Channel_idx` (`channel` ASC),
  CONSTRAINT `fk_Message_User`
    FOREIGN KEY (`creator`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Message_Channel`
    FOREIGN KEY (`channel`)
    REFERENCES `mydb`.`Channel` (`idChannel`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Store message ';


-- -----------------------------------------------------
-- Table `mydb`.`Fichier`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Fichier` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Fichier` (
  `idFichier` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `message` INT UNSIGNED NOT NULL,
  `type` VARCHAR(3) NOT NULL DEFAULT 'svg' COMMENT 'File extension\n',
  `lien` VARCHAR(45) NOT NULL DEFAULT '/downloads/',
  `name` VARCHAR(45) NOT NULL DEFAULT 'file',
  PRIMARY KEY (`idFichier`, `message`),
  UNIQUE INDEX `idFichier_UNIQUE` (`idFichier` ASC),
  INDEX `fk_Fichier_Message_idx` (`message` ASC),
  CONSTRAINT `fk_Fichier_Message`
    FOREIGN KEY (`message`)
    REFERENCES `mydb`.`Message` (`idMessage`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Parameter`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Parameter` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Parameter` (
  `idParameter` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `local` VARCHAR(45) NOT NULL DEFAULT 'fr_FR',
  `timeZone` VARCHAR(45) NOT NULL DEFAULT 'UTC-0',
  `sleepStart` INT NOT NULL DEFAULT '1200',
  `sleepEnd` INT NOT NULL DEFAULT '240',
  PRIMARY KEY (`idParameter`),
  UNIQUE INDEX `idParameter_UNIQUE` (`idParameter` ASC),
  UNIQUE INDEX `local_UNIQUE` (`local` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Emojis`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Emojis` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Emojis` (
  `idEmojis` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `raccourcie` VARCHAR(45) NOT NULL,
  `lien` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idEmojis`),
  UNIQUE INDEX `idEmojis_UNIQUE` (`idEmojis` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `raccourcie_UNIQUE` (`raccourcie` ASC),
  UNIQUE INDEX `lien_UNIQUE` (`lien` ASC))
ENGINE = InnoDB
COMMENT = 'What emoji can you use ;)';


-- -----------------------------------------------------
-- Table `mydb`.`Avatar`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Avatar` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Avatar` (
  `idAvatar` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `lien` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idAvatar`),
  UNIQUE INDEX `idAvatar_UNIQUE` (`idAvatar` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `lien_UNIQUE` (`lien` ASC))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
